services:
  postgres:
    image: postgres:15
    container_name: awesome-chat-postgres
    environment:
      POSTGRES_DB: awesome-chat-db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - awesome-network

  pgadmin:
    image: dpage/pgadmin4
    container_name: awesome-chat-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - awesome-network

  redis:
    image: bitnami/redis:latest
    container_name: awesome-chat-redis
    # restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - awesome-network
    environment:
      # Optional: Set a password for Redis (replace with a strong password)
     - REDIS_PASSWORD=awesome-password

  minio:
    image: minio/minio
    container_name: minio
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: minioadmin  # Логин для консоли
      MINIO_ROOT_PASSWORD: minioadmin  # Пароль для консоли
      MINIO_BROWSER_REDIRECT_URL: http://localhost:9001  # URL консоли
    volumes:
      - ./minio/data:/data  # Постоянное хранилище
    ports:
      - "9000:9000"  # S3 API
      - "9001:9001"  # Web-консоль
    command: server /data --console-address ":9001"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 20s
      retries: 3

  minio-setup:
    image: minio/mc
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      until (/usr/bin/mc config host add local http://minio:9000 minioadmin minioadmin) do echo 'Ожидание MinIO...'; sleep 1; done &&
      /usr/bin/mc mb local/voices &&
      /usr/bin/mc policy set public local/voices
      "

  migrations:
    build: .
    command: >
      sh -c "
      echo 'Waiting for PostgreSQL...';
      while ! nc -z postgres 5432; do sleep 1; done;
      echo 'Running migrations...';
      goose -dir ./migrations postgres 'postgres://postgres:postgres@localhost:5432/awesome-chat-db?sslmode=disable' up      echo 'Creating Kafka topics...';
      "
    depends_on: # migration -> change localhost to container name (postgres)
      postgres:
        condition: service_healthy
    networks:
      - awesome-network

  api:
    build:
      context: .
      target: builder
    command: ["/app/api"]
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      CONFIG_PATH: ./configs/api/prod.yaml
      WAIT_FOR_IT: postgres:5432
    volumes:
      - ./configs:/configs:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    networks:
      - awesome-network

  ws-server:
    build:
      context: .
      target: builder
    command: ["/app/ws-server"]
    ports:
      - "8081:8081"
    depends_on:
      - api
      - redis
    environment:
      CONFIG_PATH: ./configs/ws-server/prod.yaml
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/api/ws/health" ]
      interval: 30s
      timeout: 5s
      retries: 3
    networks:
      - awesome-network
  worker:
    build:
      context: .
      target: builder
    command: ["/app/worker"]
    depends_on:
      - redis
      - postgres
    environment:
      CONFIG_PATH: ./configs/worker/prod.yaml
    networks:
      - awesome-network

volumes:
  redis_data:
    driver: local
  pgdata:
    driver: local

networks:
  awesome-network:
    driver: bridge